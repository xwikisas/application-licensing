<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="License.Code.LicenseDetailsMacros" locale="">
  <web>License.Code</web>
  <name>LicenseDetailsMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>License.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro (findNextUniqueDetailsPageReference $nextPageReference)
  ## Use a license id as the name of the page.
  #set ($licenseId = $services.licensing.license.createLicense().id.id)
  #set ($nextPageReference = $NULL)
  #setVariable ("$nextPageReference", $services.model.createDocumentReference('', ['License', 'Data'], $licenseId))
#end

#macro (computeExpirationDate $licenseDetails)
  ## Compute the expiration date but only if it's not defined. If defined then use the defined value.
  #if ("$!licenseDetails.expirationDate" == '')
    ## For Trial licenses, have an expiration date of now + 10 days.
    ## For Paid licenses, have an expiration date of now + 1 year.
    ## For Free licenses, have an expiration date of now + 1 year.
    #set ($dateTime = $xwiki.jodatime.getMutableDateTime())
    #if ($licenseDetails.type.equalsIgnoreCase('paid'))
      #set ($discard = $dateTime.addDays(365))
    #elseif ($licenseDetails.type.equalsIgnoreCase('free'))
      #set ($discard = $dateTime.addDays(365))
    #else
      ## Check if there is a trial license to extend, in which case we need to add 11 days to the expiration date of the
      ## existing trial license, rather than to the current date.
      #getTrialLicenses($licenseDetails.instanceId $licenseDetails.featureId)
      #if (!$trialLicenses.isEmpty())
        ## Extend the trial license with the best expiration date (which should be at the start of the list). Note that
        ## the expiration date might not be set, which happens if the license page is created but the license is not yet
        ## generated. We ignore the existing trial license in this case.
        #set ($bestTrialLicense = $trialLicenses.get(0))
        #if ("$!bestTrialLicense.expirationDate" != '')
          #set ($dateTime = $xwiki.jodatime.getMutableDateTime($bestTrialLicense.expirationDate.time))
        #end
      #end
      #set ($discard = $dateTime.addDays(11))
    #end
    #set ($licenseDetails.expirationDate = $dateTime.toDate())
  #end
#end

#macro (generateLicense $licenseDetails $shouldSaveLicense $licenseDetailsReference $licenseAsString)
  ## Compute the expiration date but only if it's not defined. If defined then use the defined value.
  #computeExpirationDate($licenseDetails)
  ## Create License object.
  #set ($license = $services.licensing.license.createLicense())
  #set ($discard = $license.setId($licenseDetailsReference.name))
  #set ($discard = $license.setType($licenseDetails.type))
  #set ($discard = $license.addInstanceId($licenseDetails.instanceId))
  #set ($discard = $license.setExpirationDate($licenseDetails.expirationDate.time))
  #set ($discard = $license.setMaxUserCount($licenseDetails.maxUserCount))
  #set ($discard = $license.addLicenseeInfo('firstName', $licenseDetails.firstName))
  #set ($discard = $license.addLicenseeInfo('lastName', $licenseDetails.lastName))
  #set ($discard = $license.addLicenseeInfo('email', $licenseDetails.email))
  #set ($discard = $license.addLicenseeInfo('support', $licenseDetails.support))
  #set ($discard = $license.addFeatureId($licenseDetails.featureId))
  #foreach ($dependentFeatureId in $licenseDetails.dependentFeatureIds)
    #set ($discard = $license.addFeatureId($dependentFeatureId))
  #end
  ## Keys are stored in the permanent directory, in a subdirectory named 'license-keystore'
  #set ($keyStore = $services.crypto.store.getX509FileKeyStore('license-keystore'))
  ## Certificates are stored in wiki pages in a space named 'License.Certificates'
  #set ($certificateStore = $services.crypto.store.getX509SpaceCertificateStore(
    $services.model.resolveSpace('License.Certificates')))
  #if ($licenseDetails.type.equalsIgnoreCase('paid'))
    #set ($dn = "CN=Paid License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
  #elseif ($licenseDetails.type.equalsIgnoreCase('free'))
    #set ($dn = "CN=Free License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
  #else
    #set ($dn = "CN=Trial License Issuer ${datetool.year},OU=Licensing,O=XWiki SAS,L=Paris,C=FR")
  #end
  ## Find the password to use from the config
  #set ($configDoc = $xwiki.getDocument('License.Code.LicenseConfig'))
  #set ($password = $configDoc.getValue("${stringtool.lowerCase($licenseDetails.type)}Password"))
  #set ($signedLicense = $services.licensing.manager.generate($license, $keyStore, $certificateStore, $dn, $password))
  #if ("$!signedLicense" != '' &amp;&amp; $shouldSaveLicense)
    ## Persist the license.
    #set ($licenseStore = $services.licensing.license.getFileLicenseStore('generated-licenses'))
    #set ($discard = $services.licensing.manager.storeGeneratedLicense($licenseStore, $signedLicense))
    ## Update the license details object.
    #if ("$!licenseDetailsReference" != '')
      #set ($detailsDocument = $xwiki.getDocument($licenseDetailsReference))
      #set ($detailsObject = $detailsDocument.getObject('License.Code.LicenseDetailsClass'))
      #if ("$!detailsObject" != '')
        #foreach ($entry in $licenseDetails.entrySet())
          #set ($discard = $detailsObject.set($entry.key, $entry.value))
        #end
        #set ($discard = $detailsObject.set('hasLicense', '1'))
        #set ($discard = $detailsObject.set('licenseId', $signedLicense.id.id))
        ## If the issue date is not set, compute it.
        #if ("$!licenseDetails.issueDate" == '')
          #set ($discard = $detailsObject.set('issueDate', $datetool.date))
        #end
        #set ($discard = $detailsDocument.save('License generated', true))
        #set ($licenseAsString = $NULL)
        #setVariable ("$licenseAsString", $services.licensing.license.encode($signedLicense))
      #end
    #end
  #end
#end

#macro (readLicenseDetailsFromRequest $licenseDetails)
  #set ($featureId = $request.featureId)
  #if ($featureId.contains(':::'))
    #set ($featureId = $featureId.split(':::')[0])
  #end
  #set ($sendEmails = 1)
  #if ($request.sendEmails == '0')
    #set ($sendEmails = 0)
  #end
  #set ($discard = $licenseDetails.putAll({
    'firstName': $request.firstName,
    'lastName': $request.lastName,
    'email': $request.email,
    'instanceId': $request.instanceId,
    'featureId': $featureId,
    'extensionVersion': $request.extensionVersion,
    'type': $request.licenseType.toLowerCase(),
    'support': $request.support,
    'maxUserCount': $request.maxUserCount,
    'sendEmails': $sendEmails
  }))
#end

#macro (hasAllMandatoryLicenseDetails $licenseDetails)
  #set ($hasAllMandatoryLicenseDetails =
    "$!licenseDetails.firstName" != '' &amp;&amp;
    "$!licenseDetails.lastName" != '' &amp;&amp;
    "$!licenseDetails.email" != '' &amp;&amp;
    "$!licenseDetails.instanceId" != '' &amp;&amp;
    "$!licenseDetails.featureId" != '' &amp;&amp;
    "$!licenseDetails.type" != '')
#end

#macro (addLicenseDetails $licenseDetails $shouldGenerateLicense $licenseAsString)
  #findNextUniqueDetailsPageReference($nextPageReference)
  #set ($nextDocument = $xwiki.getDocument($nextPageReference))
  ## Extra check to make sure we never overwrite an existing page.
  #if ($nextDocument.isNew())
    ## Add a LicenseDetails xobject and fill it.
    #set ($nextObject = $nextDocument.newObject('License.Code.LicenseDetailsClass'))
    #set ($discard = $nextObject.set('licenseId', $nextPageReference.name))
    #setExtraLicenseDetails($licenseDetails)
    #foreach ($entry in $licenseDetails.entrySet())
      #set ($discard = $nextObject.set($entry.key, $entry.value))
    #end
    #set ($discard = $nextObject.set('hasLicense', '0'))
    #set ($discard = $nextDocument.save('License details added', true))
    #if ($shouldGenerateLicense)
      #generateLicense($licenseDetails true $nextPageReference $generatedLicense)
      #set ($licenseAsString = $NULL)
      #setVariable ("$licenseAsString", $generatedLicense)
    #end
  #else
    {{error}}
    Internal error: Document [$nextDocument.documentReference] already exists! Contact your system administrator.
    {{/error}}
  #end
#end

#macro (getLicensedExtension $licenseDetails)
  #if ("$!licenseDetails.extensionVersion" == '')
    #set ($versions = $services.extension.resolveVersions($licenseDetails.featureId, 0, -1))
    ## The versions are returned in ascending order and we want the latest.
    ## Note that we can't access the last item directly. We're forced to iterate.
    #foreach ($version in $versions)
      #if ($version.type == 'STABLE')
        #set ($licenseDetails.extensionVersion = $version.value)
      #end
    #end
  #end
  #set ($extension = $services.extension.resolve($licenseDetails.featureId, $licenseDetails.extensionVersion))
#end

#macro (setExtraLicenseDetails $licenseDetails)
  ## Update the dependentFeatureIds if they have changed.
  #getLicensedExtension($licenseDetails)
  #if ($extension)
    ## CollectionsTool is deprecated since 12.1RC1.
    #if ($collectiontool)
      #set ($dependentFeatureIds = $collectiontool.set)
    #else
      #set ($dependentFeatureIds = $collectionstool.set)
    #end
    #set ($packageId = $extension.getProperty('xwiki.extension.licensing.packageId'))
    #if ("$!packageId" != '')
      ## See XWIKI-15051: SafeExtension#getProperty(key, defaultValue) ignores the default value
      #set ($packageVersion = $extension.getProperty('xwiki.extension.licensing.packageVersion'))
      #if ("$!packageVersion" == '')
        #set ($packageVersion = $extension.id.version.toString())
      #end
      #set ($package = $services.extension.resolve($packageId, $packageVersion))
      #if ($package)
        ## Add the paid modules from the specified package.
        #getDependentFeatureIds($package $dependentFeatureIds)
      #end
    #end
    ## Add the paid modules that are transitive dependencies.
    #getDependentFeatureIds($extension $dependentFeatureIds)
    #set ($dependentFeatureIdsList = [])
    #set ($discard = $dependentFeatureIdsList.addAll($dependentFeatureIds))
    #if ("$!licenseDetails.dependentFeatureIds" == '' ||
        !$collectiontool.disjunction($licenseDetails.dependentFeatureIds, $dependentFeatureIdsList).isEmpty())
      ## The code that uses the license details expects dependentFeatureIds to be a list not a set.
      #set ($licenseDetails.dependentFeatureIds = [])
      #set ($discard = $licenseDetails.dependentFeatureIds.addAll($dependentFeatureIds))
    #end
  #end
#end

#macro (getDependentFeatureIds $extension $dependentFeatureIds)
  #set ($licensorId = 'com.xwiki.licensing:application-licensing-licensor-api')
  #set ($namespace = "wiki:$xcontext.database")
  #set ($dependencies = $collectiontool.queue)
  #set ($discard = $dependencies.add($services.extension.createExtensionDependency($extension.id.id,
    $extension.id.version)))
  ## We can't iterate the queue while modifying it and we can't write a "while" loop in Velocity so we're forced to
  ## rely on a range loop (limiting the number of dependencies that we analyze).
  #foreach ($i in [0..1000])
    #set ($dependency = $dependencies.poll())
    #if ($dependency)
      #set ($resolvedDependency = $services.extension.resolve($dependency, $namespace))
      #foreach ($childDependency in $resolvedDependency.dependencies)
        #if ($childDependency.id == $licensorId)
          #set ($discard = $dependentFeatureIds.add($resolvedDependency.id.id))
        ## Filter the package in order to speed up the search.
        #elseif ($childDependency.id.startsWith('com.xwiki.'))
          #set ($discard = $dependencies.add($childDependency))
        #end
      #end
    #else
      #break
    #end
  #end
  #set ($discard = $dependentFeatureIds.remove($extension.id.id))
#end

#macro (readLicenseDetailsFromDocument $licenseDetailsDocument)
  #set ($licenseDetailsObject = $licenseDetailsDocument.getObject('License.Code.LicenseDetailsClass'))
  #set ($licenseDetails = {})
  #foreach ($key in $licenseDetailsObject.propertyNames)
    #set ($discard = $licenseDetails.put($key, $licenseDetailsObject.getValue($key)))
  #end
#end

#macro (getExpiringLicensesForType $daysBeforeExpiration $type $expiringLicenses)
  #set ($results = [])
  #foreach ($days in $daysBeforeExpiration)
    #set ($statement = 'from doc.object(License.Code.LicenseDetailsClass) license ' +
      'where license.type = :type and ' +
        'license.expirationDate &gt;= :dateBegin and license.expirationDate &lt; :dateEnd')
    #set ($query = $services.query.xwql($statement))
    #set ($query = $query.bindValue('type', $type))
    ## Compute the date range.
    #set ($dateTime = $xwiki.jodatime.getDateTime())
    #set ($dateBegin = $dateTime.plusDays($days).withTimeAtStartOfDay())
    #set ($dateEnd = $dateTime.plusDays($days).plusDays(1).withTimeAtStartOfDay())
    #set ($query = $query.bindValue('dateBegin', $dateBegin.toDate()))
    #set ($query = $query.bindValue('dateEnd', $dateEnd.toDate()))
    #foreach ($result in $query.execute())
      #set ($licenseDetailsDocument = $xwiki.getDocument($result))
      #readLicenseDetailsFromDocument($licenseDetailsDocument)
      ## Check if this is the best license for the given instance id and feature id.
      #getLicenseQuery($licenseDetails.instanceId $licenseDetails.featureId $bestLicenseQuery)
      #set ($bestLicenseResults = $bestLicenseQuery.setLimit(1).execute())
      #set ($bestLicenseId = $xwiki.getDocument($bestLicenseResults[0]).getValue('licenseId'))
      #if ($licenseDetails.licenseId.equals($bestLicenseId))
        ## Store the number of days before expiration in the license details for future purposes.
        #set ($discard = $licenseDetails.put('daysBeforeExpiration', $days))
        #set ($discard = $results.add($licenseDetails))
      #end
    #end
  #end
  #set ($expiringLicenses = $NULL)
  #setVariable ("$expiringLicenses", $results)
#end

#macro (getExpiringLicenses $daysBeforeExpirationTrial $daysBeforeExpirationPaid $expiringLicenses)
  #set ($totalResults = [])
  #getExpiringLicensesForType($daysBeforeExpirationTrial, 'trial', $trialResults)
  #set ($discard = $totalResults.addAll($trialResults))
  #getExpiringLicensesForType($daysBeforeExpirationPaid, 'paid', $paidResults)
  #set ($discard = $totalResults.addAll($paidResults))
  #set ($expiringLicenses = $NULL)
  #setVariable ("$expiringLicenses", $totalResults)
#end

#macro (getTrialLicenses $instanceId $featureId)
  #getLicenseQuery($instanceId $featureId $trialLicenseQuery 'trial')
  #set ($trialLicenses = [])
  #foreach ($result in $trialLicenseQuery.execute())
    #set ($macro.licenseDetailsDocument = $xwiki.getDocument($result))
    ## Due to the way Velocity works, calling #readLicenseDetailsFromDocument() will overwrite the $licenseDetails
    ## variable leading to unexpected side effects because this variable is common in the License Manager code. We
    ## backup the variable value in order to be able to restore it after the macro call.
    #set ($licenseDetailsBackup = $licenseDetails)
    #readLicenseDetailsFromDocument($macro.licenseDetailsDocument)
    #set ($discard = $trialLicenses.add($licenseDetails))
    #set ($licenseDetails = $licenseDetailsBackup)
  #end
#end

#macro (getLicenseQuery $instanceId $featureId $query $licenseType)
  #set ($fromClause = 'from doc.object(License.Code.LicenseDetailsClass) license')
  #set ($whereClause = 'where license.instanceId = :instanceId and ' +
    '(license.featureId = :featureId or :featureId member of license.dependentFeatureIds)')
  #if ("$!licenseType" != '')
    #set ($whereClause = $whereClause + ' and license.type = :licenseType')
  #end
  #set ($orderByClause = 'order by license.expirationDate desc, doc.creationDate desc')
  #set ($computedQuery = $services.query.xwql("$fromClause $whereClause $orderByClause"))
  #set ($computedQuery = $computedQuery.bindValue('instanceId', $instanceId))
  #set ($computedQuery = $computedQuery.bindValue('featureId', $featureId))
  #if ("$!licenseType" != '')
    #set ($computedQuery = $computedQuery.bindValue('licenseType', $licenseType))
  #end
  #set ($query = $NULL)
  #setVariable ("$query", $computedQuery)
#end

#**
 * Computes the list of licenses that are currently in use (the license with the best expiration date for an instance id
 * and feature id wins).
 *#
#macro (getActiveLicenses $issuedBeforeYear $issuedAfterDate)
  ## Collect the best expiration date per instance id and feature id.
  #set ($statement = "select instanceId.value, featureId.value, max(expirationDate.value)"
    + " from XWikiDocument as doc, BaseObject as licenseObj, StringProperty as instanceId, StringProperty as featureId"
      + ", IntegerProperty hasLicense, DateProperty as expirationDate"
    + " where doc.fullName = licenseObj.name and licenseObj.className = 'License.Code.LicenseDetailsClass'"
    + " and licenseObj.id = instanceId.id.id and instanceId.id.name = 'instanceId'"
    + " and licenseObj.id = featureId.id.id and featureId.id.name = 'featureId'"
    + " and licenseObj.id = hasLicense.id.id and hasLicense.id.name = 'hasLicense'"
    + " and licenseObj.id = expirationDate.id.id and expirationDate.id.name = 'expirationDate'"
    + " and hasLicense.value = 1 and expirationDate.value &gt; :now"
    + " group by instanceId.value, featureId.value")
  #set ($query = $services.query.hql($statement))
  #set ($query = $query.bindValue('now', $datetool.date))
  #set ($bestExpirationDate = {})
  #foreach ($result in $query.execute())
    #set ($instanceId = $result.get(0))
    #set ($featureId = $result.get(1))
    #set ($expirationDate = $result.get(2))
    #set ($instanceIdEntry = $bestExpirationDate.getOrDefault($instanceId, {}))
    #set ($discard = $bestExpirationDate.put($instanceId, $instanceIdEntry))
    #set ($discard = $instanceIdEntry.put($featureId, $expirationDate))
  #end
  ## Now collect the active licenses.
  #set ($activeLicenses = [])
  #set ($statement = ", BaseObject as licenseObj, DateProperty as expirationDate, DateProperty as issueDate"
      +", IntegerProperty hasLicense, StringProperty email"
    + " where doc.fullName = licenseObj.name and licenseObj.className = 'License.Code.LicenseDetailsClass'"
    + " and licenseObj.id = expirationDate.id.id and expirationDate.id.name = 'expirationDate'"
    + " and licenseObj.id = issueDate.id.id and issueDate.id.name = 'issueDate'"
    + " and licenseObj.id = hasLicense.id.id and hasLicense.id.name = 'hasLicense'"
    + " and licenseObj.id = email.id.id and email.id.name = 'email'"
    + " and expirationDate.value &gt; :now and year(issueDate.value) &lt;= :issuedBeforeYear"
      + " and hasLicense.value = 1 and email.value not like '%@xwiki.com'")
  #if ($issuedAfterDate)
    #set ($statement = "$statement and issueDate.value &gt;= :issuedAfterDate")
  #end
  #set ($query = $services.query.hql($statement))
  #set ($query = $query.bindValue('now', $datetool.date))
  #set ($query = $query.bindValue('issuedBeforeYear', $issuedBeforeYear))
  #if ($issuedAfterDate)
    #set ($query = $query.bindValue('issuedAfterDate', $issuedAfterDate))
  #end
  #foreach ($result in $query.execute())
    #set ($licenseDetailsDocument = $xwiki.getDocument($result))
    #readLicenseDetailsFromDocument($licenseDetailsDocument)
    ## Check if this is the best license for the given instance id and feature id.
    #if ($licenseDetails.expirationDate == $bestExpirationDate.get($licenseDetails.instanceId).get($licenseDetails.featureId))
      #set ($discard = $activeLicenses.add($licenseDetails.licenseId))
    #end
  #end
#end

#**
 * Computes the list of active licenses that have to be regenerated because they were signed with a certificate that has
 * expired.
 *#
#macro (getActiveLicensesToRegenerate)
  ## The certificates used to sign the licenses we generate are valid for 2 years so we look for active licenses that
  ## were generated more than 2 years ago.
  #set ($issuedBeforeYear = $datetool.year - 2)
  #getActiveLicenses($issuedBeforeYear)
  #set ($licensesToRegenerate = [])
  #set ($licenseStore = $services.licensing.license.getFileLicenseStore('generated-licenses'))
  #foreach ($licenseId in $activeLicenses)
    #set ($retrieveGeneratedLicenseError = $NULL)
    #try ('retrieveGeneratedLicenseError')
      #set ($license = $services.licensing.manager.retrieveGeneratedLicense($licenseStore, $licenseId))
    #end
    #if ($retrieveGeneratedLicenseError || !$license.certificates)
      #set ($discard = $licensesToRegenerate.add($licenseId))
    #end
  #end
#end

#macro (getEmailsForActiveLicensesToRegenerate)
  #getActiveLicensesToRegenerate()
  #set ($emailsForActiveLicensesToRegenerate = {
    'free': $collectiontool.sortedSet,
    'paid': $collectiontool.sortedSet,
    'trial': $collectiontool.sortedSet
  })
  #foreach ($licenseId in $licensesToRegenerate)
    #set ($licenseDetailsDocument = $xwiki.getDocument("License.Data.$licenseId"))
    #set ($email = $licenseDetailsDocument.getValue('email'))
    #set ($licenseType = $licenseDetailsDocument.getValue('type'))
    #set ($discard = $emailsForActiveLicensesToRegenerate.get($licenseType.toLowerCase()).add($email))
  #end
#end

#**
 * Regenerate the specified license, adding 1 second to the expiration date and using a newer certificate.
 *#
#macro (regenerateLicense $licenseId $licenseAsString $extensionVersion)
  #set ($licenseDetailsDocument = $xwiki.getDocument("License.Data.$licenseId"))
  #readLicenseDetailsFromDocument($licenseDetailsDocument)
  ## When generating the licensed dependencies for this new license, the latest available extension version will be used
  ## if there isn't a version specified.
  #if ("$extensionVersion" != '')
    #set ($discard = $licenseDetails.put('extensionVersion', $extensionVersion))
  #end
  ## Add 1 second to the expiration date to make the new license better (anything less than 1 second will be discarded
  ## at the database level so won't make the new license better).
  #set ($licenseDetails.expirationDate = $datetool.toDate($mathtool.add($licenseDetails.expirationDate.time, 1000)))
  #set ($discard = $licenseDetails.keySet().removeAll(['licenseId', 'hasLicense', 'issueDate']))
  #addLicenseDetails($licenseDetails true $licenseAsString)
#end

#**
 * Regenerate all active licenses that are broken because they were signed with a certificate that has expired.
 *#
#macro (regenerateBrokenLicenses)
  #getActiveLicensesToRegenerate()
  #foreach ($licenseId in $licensesToRegenerate)
    #regenerateLicense($licenseId)
    #if ($foreach.index &gt; 10)
      #break
    #end
  #end
#end
{{/velocity}}</content>
</xwikidoc>
