<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="Licenses.Code.VelocityMacros" locale="">
  <web>Licenses.Code</web>
  <name>VelocityMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Licenses.Code.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set ($LONG_MAX_VALUE = $mathtool.pow(2,63))
#set ($licensorId = 'com.xwiki.licensing:application-licensing-licensor-api')
#set ($licensingConfigDoc = $xwiki.getDocument('Licenses.Code.LicensingConfig'))
#set ($storeBuyURL = $licensingConfigDoc.storeBuyURL)
#set ($storeAccessURL = $licensingConfigDoc.storeAccessURL)
#set ($ownerObj = $licensingConfigDoc.getObject('Licenses.Code.LicensingOwnerClass'))
#set ($userCount = $services.licensing.licensor.userCount)

#macro (getPaidExtensions)
  #set ($paidExtensionsByNamespace = $services.extension.installed.getBackwardDependencies($licensorId))
  #set ($paidExtensions = $collectiontool.set)
  #foreach ($paidExtensionsOnNamespace in $paidExtensionsByNamespace.values())
    #set ($discard = $paidExtensions.addAll($paidExtensionsOnNamespace))
  #end
#end

#macro (getVisiblePaidExtensions)
  #getPaidExtensions
  #set ($visiblePaidExtensions = $collectiontool.set)
  #foreach ($paidExtension in $paidExtensions)
    ## Filter out the paid extensions that are dependencies of other paid extensions (because the license of a paid
    ## extension should cover its paid dependencies).
    #isRequiredBy($paidExtension $paidExtensions)
    #if (!$isRequiredBy)
      #set ($discard = $visiblePaidExtensions.add($paidExtension))
    #end
  #end
#end

#macro (isRequiredBy $installedExtension $extensions)
  #set ($isRequiredBy = false)
  #set ($backwardDependencies = $collectiontool.queue)
  #addBackwardDependencies($installedExtension $backwardDependencies)
  ## We can't iterate the queue while modifying it and we can't write a "while" loop in Velocity so we're forced to
  ## rely on a range loop (limiting the number of backward dependencies that we analyze).
  #foreach ($i in [0..1000])
    #set ($backwardDependency = $backwardDependencies.poll())
    #if ($backwardDependency)
      #if ($extensions.contains($backwardDependency))
        #set ($isRequiredBy = true)
        #break
      #else
        #addBackwardDependencies($backwardDependency $backwardDependencies)
      #end
    #else
      #break
    #end
  #end
#end

#macro (addBackwardDependencies $installedExtension $backwardDependencies)
  #set ($backwardDependenciesSet = $collectiontool.set)
  #set ($discard = $backwardDependenciesSet.addAll($backwardDependencies))
  #set ($backwardDependenciesByNamespace = $services.extension.installed.getBackwardDependencies($installedExtension.id))
  #foreach ($backwardDependenciesOnNamespace in $backwardDependenciesByNamespace.values())
    #foreach ($backwardDependency in $backwardDependenciesOnNamespace)
      #if ($backwardDependenciesSet.add($backwardDependency))
        #set ($discard = $backwardDependencies.add($backwardDependency))
      #end
    #end
  #end
#end

#macro (getLicensesAdminSectionURL)
  ## We target the main wiki explicitly because licenses are managed globally.
  #if ($xwiki.exists($services.model.createDocumentReference($xcontext.mainWikiName, 'XWiki', 'ConfigurableClass')))
    $xwiki.getURL($services.model.createDocumentReference($xcontext.mainWikiName, 'XWiki', 'XWikiPreferences'),
      'admin', 'editor=globaladmin&amp;section=Licenses')##
  #else
    ## Fall-back in case the Administration Application is not installed.
    $xwiki.getURL($services.model.createDocumentReference($xcontext.mainWikiName, 'Licenses', 'WebHome'))##
  #end
#end

#macro (getInstanceIdFormField)
  &lt;dt&gt;
    &lt;label for="instanceId"&gt;$services.localization.render('licensor.ownerDetails.instanceId.label')&lt;/label&gt;
    &lt;span class="xHint"&gt;$services.localization.render('licensor.ownerDetails.instanceId.hint')&lt;/span&gt;
  &lt;/dt&gt;
  &lt;dd&gt;
    #getInstanceIdInput(false)
  &lt;/dd&gt;
#end

#macro (getInstanceIdInput $hidden)
  #set ($type = 'text')
  #if ($hidden)
    #set ($type = 'hidden')
  #end
  &lt;input type="$type" name="instanceId" id="instanceId" value="${services.instance.getInstanceId()}" readonly /&gt;
#end

#macro (getOwnerFormFields)
  #foreach ($prop in $ownerObj.properties)
    &lt;dt&gt;
      &lt;label for="${prop.name}"&gt;$services.localization.render("licensor.ownerDetails.${prop.name}.label")&lt;/label&gt;
      #set ($hintTranslationKey = "licensor.ownerDetails.${prop.name}.hint")
      #set ($hint = $services.localization.render($hintTranslationKey))
      #if ($hint != $hintTranslationKey)
        &lt;span class="xHint"&gt;$!escapetool.xml($hint)&lt;/span&gt;
      #end
    &lt;/dt&gt;
    #set ($inputType = 'text')
    #if ($prop.name == 'email')
      #set ($inputType = 'email')
    #end
    &lt;dd&gt;&lt;input type="$inputType" name="${prop.name}" id="${prop.name}" value="$!{prop.value}" /&gt;&lt;/dd&gt;
  #end
#end

#macro (displayOwnerDetailsForm)
  {{html clean=false}}
  &lt;form id="ownerDetails" target="_blank" class="xform half" action="${storeBuyURL}" method="post"&gt;
    &lt;fieldset class="header"&gt;
      &lt;legend&gt;$services.localization.render('licensor.ownerDetails.heading')&lt;/legend&gt;
      &lt;p&gt;$services.localization.render('licensor.ownerDetails.hint')&lt;/p&gt;
      &lt;input type="hidden" name="form_token" value="$!escapetool.xml($services.csrf.token)" /&gt;
      &lt;dl&gt;
        #getOwnerFormFields
        #getInstanceIdFormField
      &lt;/dl&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;
  {{/html}}
#end

#macro (licenseButton $licenseType $cssClass $iconName $key $jsonData)
  #set ($jsonData.licenseType = $licenseType)
  #set ($label = $escapetool.xml($services.localization.render("licensor.${key}License.label")))
  &lt;a href="#$escapetool.xml($key)" class="action licenseButton licenseButton-$escapetool.xml($key)"
      data-button="$escapetool.xml($jsontool.serialize($jsonData))" title="$label"&gt;
    &lt;span class="action-icon"&gt;&lt;span class="fa fa-$iconName"&gt;&lt;/span&gt;&lt;/span&gt;##
    &lt;span class="action-label"&gt;$label&lt;/span&gt;
  &lt;/a&gt;
#end

#macro (autoUpgradeButton $extensionId)
  #set ($licensingConfigDoc = $xwiki.getDocument('Licenses.Code.LicensingConfig'))
  #set ($autoUpgradesObj = $licensingConfigDoc.getObject('Licenses.Code.AutomaticUpgradesClass'))
  #set ($isAutoUpgrade = $autoUpgradesObj.getValue('allowlist').contains($extensionId))
  #set ($upgradeL10nKey = "#if ($isAutoUpgrade)prevent#{else}allow#end")
  &lt;div class="btn-group"&gt;
    &lt;form target="_blank" class="xform half"&gt;
      &lt;input type="hidden" name="form_token" value="$!escapetool.xml($services.csrf.token)" /&gt;
      &lt;input type="hidden" name="extensionId" value="$!escapetool.xml($extensionId)" /&gt;
      &lt;input type="hidden" name="autoUpgrade" value="$!escapetool.xml($isAutoUpgrade)" /&gt;
      &lt;a href="#autoUpgrade" class="action licenseButton-autoUpgrade" title="$escapetool.xml(
          $services.localization.render("licensor.moreActions.autoUpgrade.${upgradeL10nKey}"))" &gt;
        &lt;span class="action-icon #if ($isAutoUpgrade)isAutoUpgrade#end"&gt;
          &lt;span class="fa fa-cloud-download"&gt;&lt;/span&gt;##
        &lt;/span&gt;&lt;span class="action-label"&gt;$escapetool.xml(
          $services.localization.render('licensor.moreActions.autoUpgrade.label'))
        &lt;/span&gt;
      &lt;/a&gt;
    &lt;/form&gt;
  &lt;/div&gt;
#end

#macro (getLicenseActions $license $extension $actions)
  ## Use the JSON format in order to be parsable in JavaScript.
  #set ($jsonData = {
    'featureId': $extension.id.id,
    'extensionVersion': $extension.id.version.toString(),
    'userCount': $userCount
  })
  #if (!$license || $license.expirationDate == 0)
    ## No license available.
    #set ($discard = $actions.add("#licenseButton('PAID' 'success' 'shopping-cart' 'paid' $jsonData)"))
    #set ($discard = $actions.add("#licenseButton('TRIAL' 'primary' 'hourglass-start' 'trial' $jsonData)"))
  #elseif ($license.type == 'FREE')
    #set ($discard = $actions.add("#licenseButton('PAID' 'success' 'shopping-cart' 'paid' $jsonData)"))
  #elseif ($license.type == 'TRIAL')
    #set ($discard = $actions.add("#licenseButton('PAID' 'success' 'shopping-cart' 'paid' $jsonData)"))
    #set ($discard = $actions.add("#licenseButton('TRIAL' 'primary' 'hourglass-end' 'extendTrial' $jsonData)"))
  #elseif ($license.type == 'PAID')
    #set ($discard = $actions.add("#licenseButton('PAID' 'success' 'shopping-cart' 'extendPaid' $jsonData)"))
  #end
#end

#macro (licenseActions $license $extension)
  #set ($actions = [])
  ## Pull the resources needed by license actions.
  #set ($discard = $services.icon.use('Font Awesome'))
  #getLicenseActions($license $extension $actions)
  &lt;div class="licenseActions container-fluid"&gt;
    &lt;div class="row"&gt;
      $stringtool.join($actions, '')
    &lt;/div&gt;
    &lt;div class="row"&gt;
      #autoUpgradeButton($extension.id.id)
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}</content>
</xwikidoc>
