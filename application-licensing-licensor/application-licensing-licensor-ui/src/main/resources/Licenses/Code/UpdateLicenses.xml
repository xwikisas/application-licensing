<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="Licenses.Code.UpdateLicenses" locale="">
  <web>Licenses.Code</web>
  <name>UpdateLicenses</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Licenses.Code.VelocityMacros" /}}

{{velocity wiki="false"}}
#if ($request.confirm != 'true')
  #stop
#elseif (!$services.csrf.isTokenValid($request.form_token))
  #set ($discard = $response.sendError(401, $services.localization.render('licensor.badCSRFToken')))
  #stop
#end
#set ($data = {
  'outputSyntax': 'plain',
  'instanceId': "$services.instance.instanceId"
})
#set ($discard = $data.put('featureId', $collectiontool.set))
##
## Collect the feature ids.
##
#getVisiblePaidExtensions
#foreach ($visiblePaidExtension in $visiblePaidExtensions)
  #set ($featureId = $visiblePaidExtension.id.id)
  #set ($discard = $data.featureId.add($featureId))
  ## Pass the known expiration date in order to avoid retrieving licenses we already have.
  #set ($license = $services.licensing.licensor.getLicenseForExtension($visiblePaidExtension.id))
  #if ($license)
    #set ($discard = $data.put("expirationDate:$featureId", $license.expirationDate))
  #end
#end
##
## Retrieve license updates from the XWiki Store.
##
#if ($data.featureId.size() &gt; 0)
  #set ($licensingConfigDoc = $xwiki.getDocument('Licenses.Code.LicensingConfig'))
  #set ($storeUpdateURL = $licensingConfigDoc.getValue('storeUpdateURL'))
  #set ($licensesJSON = $xwiki.getURLContent("$storeUpdateURL?$escapetool.url($data)"))
  #set ($licenses = $jsontool.fromString($licensesJSON))
  #if (!$licenses)
    ## Invalid JSON.
    #set ($licenses = $jsontool.parse($licensesJSON))
  #end
#else
  #set ($licenses = [])
#end
##
## Apply the updates.
##
#if (!$licenses)
  #set ($jsonResponse = {
    'status': 'error',
    'notification': $services.localization.render('licensor.updateLicenses.failedToRetrieve')
  })
#elseif ($licenses.isEmpty())
  #set ($jsonResponse = {
    'status': 'info',
    'notification': $services.localization.render('licensor.updateLicenses.noUpdates')
  })
#else
  #set ($successCount = 0)
  #foreach ($license in $licenses)
    #set ($result = $NULL)
    #try('addLicenseException')
      #set ($result = $services.licensing.licensor.addLicense($license))
    #end
    #if ($result)
      #set ($successCount = $successCount + 1)
    #end
  #end
  #set ($jsonResponse = {
    'status': 'done',
    'notification': $services.localization.render('licensor.updateLicenses.applied', [$successCount, $licenses.size()]),
    'updateCount': $successCount
  })
  #if ($successCount == 0)
    #set ($jsonResponse.status = 'error')
  #elseif ($successCount &lt; $licenses.size())
    #set ($jsonResponse.status = 'warning')
  #end
#end
##
## Return the response.
##
#if ($xcontext.action == 'get')
  #set ($discard = $response.setContentType('application/json'))
#end
#if ($jsonResponse.status == 'error')
  #set ($discard = $response.setStatus(500))
#end
$jsontool.serialize($jsonResponse)
{{/velocity}}</content>
</xwikidoc>
