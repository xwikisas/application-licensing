<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.4" reference="Licenses.WebHome" locale="">
  <web>Licenses</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Main.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>Licensed Extensions</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Licenses.Code.VelocityMacros" /}}

{{velocity output="false"}}
#macro (displayLicensesLiveTable)
  {{html clean="false"}}
  &lt;fieldset class="header"&gt;
    &lt;legend&gt;$services.localization.render('licensor.licenseManager.heading')&lt;/legend&gt;
    $services.localization.render('licensor.licenseManager.hint')
  &lt;/fieldset&gt;
  {{/html}}
  #set ($columns = ['name', 'version', 'status', 'support', 'userLimit', 'wiki', 'actions'])
  #set ($columnsProperties = {
    'name': {'filterable': false, 'sortable': false, 'link': 'auto'},
    'version': {'filterable': false, 'sortable': false},
    'status': {'filterable': false, 'sortable': false, 'html': true},
    'support': {'filterable': false, 'sortable': false},
    'userLimit': {'filterable': false, 'sortable': false, 'html': true},
    'wiki': {'filterable': false, 'sortable': false},
    'actions': {'filterable': false, 'sortable': false, 'html': true}
  })
  #set ($options = {
    'resultPage':'Licenses.Code.LicenseJSON',
    'translationPrefix' : 'licensor.',
    'extraParams': "&amp;showAllPaidExtensions=$!escapetool.url($request.showAllPaidExtensions)"
  })
  #livetable('licenseManager' $columns $columnsProperties $options)
  {{html clean="false"}}
  &lt;p&gt;
    &lt;button id="updateLicenses" class="btn btn-default" data-toggle="popover"
        title="$escapetool.xml($services.localization.render('licensor.updateLicenses.hint'))"
        data-title="$escapetool.xml($services.localization.render('licensor.updateLicenses.hint.title'))"
        data-content="$escapetool.xml($services.localization.render('licensor.updateLicenses.hint.content'))"&gt;
      $escapetool.xml($services.localization.render('licensor.updateLicenses.label'))
    &lt;/button&gt;
  &lt;/p&gt;
  {{/html}}
#end

#macro (displayAddLicenseForm)
  {{html clean=false}}
  &lt;form id="addLicense" class="xform half" action="$xwiki.getURL('Licenses.Code.AddLicense', 'get',
      'outputSyntax=plain')" method="post"&gt;
    &lt;fieldset class="header"&gt;
      &lt;legend&gt;$services.localization.render('licensor.addLicense.heading')&lt;/legend&gt;
      &lt;p&gt;$services.localization.render('licensor.addLicense.hint')&lt;/p&gt;
      &lt;textarea name="license" id="license" rows="5"&gt;&lt;/textarea&gt;
      &lt;input type="hidden" name="form_token" value="$!escapetool.xml($services.csrf.token)" /&gt;
      &lt;input class="btn btn-default" type="submit" value="$services.localization.render('licensor.addLicense.submit')"&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;
  {{/html}}
#end
{{/velocity}}

{{velocity}}
## The licensor UI is a dependency of the licensor API which needs to be installed on farm. The licensor UI should be
## accessible only from the main wiki but we can't limit its installation to the main wiki so we need to check here if
## we are on the main wiki.
#if (!$xcontext.isMainWiki())
  {{info}}
  $services.localization.render('licensor.unavailableOnSubWiki', ['[[', "&gt;&gt;path:#getLicensesAdminSectionURL]]"])
  {{/info}}
#elseif (!$hasAdmin || !$hasProgramming)
  {{error}}
  $services.localization.render('licensor.accessDenied')
  {{/error}}
#else
  #set ($discard = $xwiki.ssx.use('Licenses.WebHome'))
  #set ($discard = $xwiki.jsx.use('Licenses.WebHome'))
  #displayOwnerDetailsForm
  #displayLicensesLiveTable
  #displayAddLicenseForm
#end
{{/velocity}}</content>
  <object>
    <name>Licenses.WebHome</name>
    <number>0</number>
    <className>XWiki.ConfigurableClass</className>
    <guid>2bf591dd-14b3-4247-a12c-25eacfd523c8</guid>
    <class>
      <name>XWiki.ConfigurableClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <categoryIcon>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>categoryIcon</name>
        <number>11</number>
        <picker>0</picker>
        <prettyName>categoryIcon</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </categoryIcon>
      <codeToExecute>
        <contenttype>VelocityWiki</contenttype>
        <customDisplay/>
        <disabled>0</disabled>
        <editor>---</editor>
        <hint/>
        <name>codeToExecute</name>
        <number>7</number>
        <picker>0</picker>
        <prettyName>codeToExecute</prettyName>
        <rows>5</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </codeToExecute>
      <configurationClass>
        <cache>0</cache>
        <classname/>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <freeText/>
        <hint/>
        <idField/>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>configurationClass</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>configurationClass</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators/>
        <size>30</size>
        <sort>none</sort>
        <sql/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <valueField/>
        <classType>com.xpn.xwiki.objects.classes.PageClass</classType>
      </configurationClass>
      <displayBeforeCategory>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>displayBeforeCategory</name>
        <number>10</number>
        <picker>0</picker>
        <prettyName>displayBeforeCategory</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </displayBeforeCategory>
      <displayInCategory>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>displayInCategory</name>
        <number>9</number>
        <picker>0</picker>
        <prettyName>displayInCategory</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </displayInCategory>
      <displayInSection>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>displayInSection</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>displayInSection</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </displayInSection>
      <heading>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>heading</name>
        <number>2</number>
        <picker>0</picker>
        <prettyName>heading</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </heading>
      <iconAttachment>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>iconAttachment</name>
        <number>8</number>
        <picker>0</picker>
        <prettyName>iconAttachment</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </iconAttachment>
      <linkPrefix>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>linkPrefix</name>
        <number>5</number>
        <picker>0</picker>
        <prettyName>linkPrefix</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </linkPrefix>
      <propertiesToShow>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <freeText/>
        <hint/>
        <largeStorage>0</largeStorage>
        <multiSelect>1</multiSelect>
        <name>propertiesToShow</name>
        <number>6</number>
        <picker>0</picker>
        <prettyName>propertiesToShow</prettyName>
        <relationalStorage>1</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>20</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values/>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </propertiesToShow>
      <scope>
        <cache>0</cache>
        <customDisplay/>
        <defaultValue/>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText/>
        <hint/>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>12</number>
        <picker>1</picker>
        <prettyName>scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <sort/>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>WIKI|SPACE|ALL_SPACES|WIKI+ALL_SPACES</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
      <sectionOrder>
        <customDisplay/>
        <disabled>0</disabled>
        <hint/>
        <name>sectionOrder</name>
        <number>12</number>
        <numberType>integer</numberType>
        <prettyName>sectionOrder</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <classType>com.xpn.xwiki.objects.classes.NumberClass</classType>
      </sectionOrder>
    </class>
    <property>
      <categoryIcon/>
    </property>
    <property>
      <codeToExecute>{{include reference="Licenses.WebHome" /}}</codeToExecute>
    </property>
    <property>
      <configurationClass/>
    </property>
    <property>
      <displayBeforeCategory/>
    </property>
    <property>
      <displayInCategory>extensionmanager</displayInCategory>
    </property>
    <property>
      <displayInSection>Licenses</displayInSection>
    </property>
    <property>
      <heading/>
    </property>
    <property>
      <iconAttachment/>
    </property>
    <property>
      <linkPrefix/>
    </property>
    <property>
      <propertiesToShow/>
    </property>
    <property>
      <scope>WIKI</scope>
    </property>
    <property>
      <sectionOrder>600</sectionOrder>
    </property>
  </object>
  <object>
    <name>Licenses.WebHome</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a4052124-0472-4347-814d-7f000605e118</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define('auto-update-button', {
  prefix: 'licensor.moreActions.autoUpgrade.',
  keys: [
    'allow',
    'prevent'
  ]
});
define('licensor', ['jquery', 'xwiki-meta', 'xwiki-l10n!auto-update-button'], function($, xwikiMeta, l10n) {
  return {
    addLicense: function(data) {
      return $.post(
        new XWiki.Document('AddLicense', 'Licenses.Code').getURL('get', 'outputSyntax=plain'),
        data
      ).then(null, function(result) {
        return result.responseJSON ? result.responseJSON : {
          status: 'error',
          notification: $jsontool.serialize($services.localization.render('licensor.addLicense.nonJSON'))
        };
      }).done(function() {
        $(document).trigger('xwiki:license:added');
      });
    },
    updateLicenses: function() {
      return $.post(
        new XWiki.Document('UpdateLicenses', 'Licenses.Code').getURL('get'),
        {
          outputSyntax: 'plain',
          form_token: xwikiMeta.form_token,
          confirm: true
        }
      ).then(null, function(result) {
        return result.responseJSON ? result.responseJSON : {
          status: 'error',
          notification: $jsontool.serialize($services.localization.render('licensor.addLicense.nonJSON'))
        };
      }).done(function(result) {
        if (result.updateCount &amp;&amp; result.updateCount &gt; 0) {
          $(document).trigger('xwiki:license:updated');
        }
      });
    },
    getTrialLicense: function(data) {
      return $.post(
        new XWiki.Document('GetTrialLicenseService', 'Licenses.Code').getURL('get', 'outputSyntax=plain'),
        data
      ).then(null, function(result) {
        return result.responseJSON ? result.responseJSON : {
          status: 'error',
          data: $jsontool.serialize($services.localization.render('licensor.addLicense.nonJSON'))
        };
      });
    },
    updateOwnerDetails: function(data) {
      return $.post(
        new XWiki.Document('UpdateOwnerDetails', 'Licenses.Code').getURL('get', 'outputSyntax=plain'),
        data
      );
    },
    modifyAutoUpgradesAllowList: function(data) {
      return $.post(
        new XWiki.Document('UpdateAutomaticUpgradesAllowList', 'Licenses.Code').getURL('get', 'outputSyntax=plain'),
        data
      );
    }
  };
});

require(['jquery', 'licensor', 'xwiki-meta', 'xwiki-l10n!auto-update-button', 'xwiki-events-bridge', 'bootstrap'], function ($, licensor, xwikiMeta, l10n) {
  //
  // Owner Details Form
  //

  var validateOwnerDetails = function(ownerDetailsForm) {
    // Make sure required details are not missing.
    var valid = true;
    var focus = true;
    ownerDetailsForm.find('input:visible').each(function() {
      $(this).removeClass('required');
      var inputValue = $(this).val().trim();
      // Check for a minimum number of chars filled in by the user.
      if (inputValue.length &lt; 2) {
        // Focus on first element that needs to be filled with data.
        if (focus) {
          $(this).focus();
          focus = false;
        }
        valid = false;
        $(this).addClass('required');
        $(this).attr('placeholder', $jsontool.serialize($services.localization.render(
          'licensor.ownerDetails.missingData')));
      }
    });
    return valid;
  };

  //
  // Add License Form
  //

  var addLicense = function(data) {
    var addLicenseForm = $('form#addLicense');
    // Disable the form.
    addLicenseForm.find(':input').prop('disabled', true);
    // Show a notification message.
    var progressNotification = new XWiki.widgets.Notification($jsontool.serialize($services.localization.render(
      'licensor.addLicense.adding')), 'inprogress');
    licensor.addLicense(data).always(function(result) {
      // Update the notification message.
      progressNotification.replace(new XWiki.widgets.Notification(result.notification, result.status));
      // Re-enable the form.
      addLicenseForm.find(':input').prop('disabled', false);
    }).done(function() {
      // Clear the license text area.
      $('textarea#license').val('');
    });
  };

  $("form#addLicense").submit(function(event) {
    event.preventDefault();
    addLicense($(this).serialize());
  });

  //
  // Licensed Extensions Live Table
  //

  var computeHasTrialKey = function(instanceId, featureId) {
    return instanceId + '_' + featureId;
  };

  // Remove "Extend Trial" buttons from livetable, if the trial licenses limits were reached.
  var updateLivetableButtons = function() {
    var instanceId = $('#instanceId').val();
    $('.licenseActions .licenseButton-extendTrial').each(function() {
      // Compute the key to check in the localStorage.
      var buttonData = JSON.parse($(this).attr('data-button'));
      var featureId = buttonData.featureId;
      var hasTrialsKey = computeHasTrialKey(instanceId, featureId);
      // The value is stored as a string in the local storage.
      if (localStorage.getItem(hasTrialsKey) === 'false') {
        // Remove the "Extend Trial" button.
        $(this).remove();
      }
    });
  };

  // An extensionId could have multiple rows in the livetable if is installed on multiple subwikis, but the allowlist
  // is applied to all namespaces.
  var updateExtensionOfOtherWikis = function(extensionId, isAutoUpgrade) {
    var similarExtensions = $("input[name='extensionId'][value='" + extensionId + "']");
    similarExtensions.each(function() {
      var autoUpgradeButton = $(this).siblings('.licenseButton-autoUpgrade');
      autoUpgradeButton.find('.action-icon').toggleClass('isAutoUpgrade', isAutoUpgrade);
      var translationKey = isAutoUpgrade ? 'prevent' : 'allow';
      autoUpgradeButton.prop('title', l10n.get(translationKey));
    });
  };

  // xwiki:livetable:displayComplete might be triggered before the code from this jsx is executed. In this case, the
  // livetable is also loaded before, because it is using Prototype.js which is loading before the page loads.
  // Make sure that the livetable is loaded by checking for a row with some data.
  if ($('#licenseManager-display td.type').length &gt; 0) {
    updateLivetableButtons();
  }
  $(document).on('xwiki:livetable:displayComplete', updateLivetableButtons);

  // Reload the live table of licensed extensions when licenses are added or updated.
  var reloadTimeoutId;
  $(document).on('xwiki:license:added xwiki:license:updated', function() {
    clearTimeout(reloadTimeoutId);
    reloadTimeoutId = setTimeout(function() {
      if ($.type(window.livetable_licenseManager) !== 'undefined') {
        // Reload the livetable.
        livetable_licenseManager.refresh();
      }
    }, 0);
  });

  var getValue = function(arrayOfNameValuePairs, name) {
    return arrayOfNameValuePairs.filter(function(pair) {
      return pair.name === name
    })[0].value;
  };

  var getTrialLicense = function(data, trialButton) {
    trialButton.prop('disabled', true);
    var progressNotification = new XWiki.widgets.Notification(
      $jsontool.serialize($services.localization.render('licensor.addLicense.gettingTrialLicense')), 'inprogress');
    licensor.getTrialLicense(data).always(function() {
      trialButton.prop('disabled', false);
    }).done(function(result) {
      // Cache the "hasTrials" value in local storage.
      var hasTrialsKey = computeHasTrialKey(getValue(data, 'instanceId'), getValue(data, 'featureId'));
      var hasTrialValue = result.hasTrials;
      localStorage.setItem(hasTrialsKey, hasTrialValue);
      // Hide the "Extend Trial" button if "hasTrials" is false.
      if (hasTrialValue === false) {
        trialButton.hide();
      }
      // We hide the notification message because addLicense will show its own notification message.
      progressNotification.hide();
      addLicense({
        license: result.data,
        form_token: xwikiMeta.form_token
      });
    }).fail(function(result) {
      progressNotification.replace(new XWiki.widgets.Notification(result.data, result.status));
    });
  };

  // Manages the license buttons from the licenses livetable. If a trial is requested, it is automatically generated
  // and installed, else the user is redirected to a page to buy a license.
  $('#licenseManager').on('click', '.licenseButton', function(e) {
    e.preventDefault();
    var ownerDetailsForm = $('#ownerDetails');
    if (!validateOwnerDetails(ownerDetailsForm)) {
      return;
    }
    // Update the owner details.
    var ownerDetails = ownerDetailsForm.serializeArray();
    licensor.updateOwnerDetails(ownerDetails);
    // Get the data from the license button.
    var buttonData = JSON.parse($(this).attr('data-button'));
    if (buttonData.licenseType === 'TRIAL') {
      ownerDetails.push.apply(ownerDetails, $.map(buttonData, function(value, name) {
        return {name: name, value: value};
      }));
      getTrialLicense(ownerDetails, $(this));
    } else if (buttonData.licenseType === 'PAID') {
      var extraFields = $($.map(buttonData, function(value, name) {
        return $("&lt;input type='hidden'/&gt;").attr({name: name, value: value})[0];
      }));
      ownerDetailsForm.append(extraFields).submit();
      extraFields.remove();
    };
  });

  // Show a popover on the "Check for Updates" button to let the user know what to do after he pays for the license.
  $('#updateLicenses').each(function() {
    // Initialize the popover with a different title.
    var originalTitle = $(this).attr('title');
    // We trigger the popover manually after the user clicks on the Buy/Extend license button.
    $(this).attr('title', $(this).attr('data-title')).popover({trigger: 'manual'}).attr('title', originalTitle);
  });

  $('#ownerDetails').submit(function () {
    var updateLicensesButton = $('#updateLicenses');
    updateLicensesButton.one('click', function() {
      // Hide the popover on the first click.
      $(this).popover('hide');
    });
    updateLicensesButton[0].scrollIntoView();
    updateLicensesButton.focus().popover('show');
  });

  $('#updateLicenses').on('click', function() {
    var updateButton = $(this);
    updateButton.prop('disabled', true);
    // Show a notification message.
    var progressNotification = new XWiki.widgets.Notification(
      $jsontool.serialize($services.localization.render('licensor.updateLicenses.checking')), 'inprogress');
    licensor.updateLicenses().always(function(result) {
      updateButton.prop('disabled', false);
      // Update the notification message.
      progressNotification.replace(new XWiki.widgets.Notification(result.notification, result.status));
    });
  });

  $(document).on('click', '.licenseButton-autoUpgrade', function(e) {
    e.preventDefault();
    var autoUpgradeButton = $(this);
    var autoUpgradeForm = autoUpgradeButton.closest('form').serializeArray();
    licensor.modifyAutoUpgradesAllowList(autoUpgradeForm).success(function(data) {
      autoUpgradeButton.find('.action-icon').toggleClass('isAutoUpgrade', data.isAutoUpgrade);
      if(data.isAutoUpgrade) {
        autoUpgradeButton.prop('title', l10n.get('prevent'));
        new XWiki.widgets.Notification(
          $jsontool.serialize($services.localization.render('licensor.moreActions.autoUpgrade.added')), 'done');
      } else {
        autoUpgradeButton.prop('title', l10n.get('allow'));
        new XWiki.widgets.Notification(
          $jsontool.serialize($services.localization.render('licensor.moreActions.autoUpgrade.removed')), 'done');
      }
      updateExtensionOfOtherWikis(data.extensionId, data.isAutoUpgrade);
    });
  });

  // Set the documentation links to open in new tab.
  $('#licenseManager-display td.name a').each(function() {
    $(this).attr('target', '_blank')
  });
});</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>Licenses.WebHome</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>48861c06-ca38-4072-812c-422b75c0e776</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#ownerDetails input.required {
  border:1px solid red;
}

#addLicense + .errormessage {
  margin-top: .7em;
}

/* .dropleft to be used after moving to Bootstrap 4 */
.dropdown-left {
  right: 0;
  left: auto;
}

.licenseButton-paid .action-icon, .licenseButton-extendPaid .action-icon, .isAutoUpgrade {
  color: @brand-success;
}
.licenseButton-trial .action-icon, .licenseButton-extendTrial .action-icon {
  color: @link-color;
}</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
